use std::io::{Cursor, Error, Read, Write};
use byteorder::{LittleEndian, ReadBytesExt, WriteBytesExt};

pub fn make_tunneled_packet(op_code: u16, bytes: &[u8]) -> Result<Vec<u8>, Error> {
    let mut buffer = Vec::new();
    buffer.write_u16::<LittleEndian>(5)?;
    buffer.write_u8(true as u8)?;
    buffer.write_u32::<LittleEndian>(bytes.len() as u32 + 2)?;
    buffer.write_u16::<LittleEndian>(op_code)?;
    buffer.write_all(&bytes)?;
    Ok(buffer)
}

pub fn extract_tunneled_packet_data(data: &[u8]) -> Result<(u16, Vec<u8>), Error> {
    let mut cursor = Cursor::new(data);
    let tunneled_op_code = cursor.read_u16::<LittleEndian>()?;
    if tunneled_op_code != 5 {
        // TODO: use custom error type
        panic!("Expected a tunneled packet, but found op code {}", tunneled_op_code);
    }

    cursor.read_u8()?;
    let size = cursor.read_u32::<LittleEndian>()?.checked_sub(2).unwrap_or(0);
    let op_code = cursor.read_u16::<LittleEndian>()?;
    let mut buffer = vec![0; size as usize];
    cursor.read_exact(&mut buffer)?;

    Ok((op_code, buffer))
}

pub fn send_item_definitions() -> Result<Vec<u8>, Error> {
    let mut bytes: Vec<u8> = vec![];
    let mut buffer = Vec::new();
    buffer.write_u16::<LittleEndian>(0x25)?;
    buffer.write_i32::<LittleEndian>(bytes.len() as i32)?;
    buffer.append(&mut bytes);
    make_tunneled_packet(0x23, &buffer)
}

pub fn send_self_to_client() -> Result<Vec<u8>, Error> {
    let mut bytes: Vec<u8> = vec![
        0x2B, 0x44, 0xA8, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x01, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x43, 0x68, 0x61, 0x72, 0x5F, 0x43, 0x6C, 0x6F, 0x6E, 0x65, 0x48, 0x65, 0x61, 0x64, 0x2E, 0x61, 0x64, 0x72, 0x1F, 0x00, 0x00, 0x00, 0x43, 0x75, 0x73, 0x74, 0x5F, 0x43, 0x6C, 0x6F, 0x6E, 0x65, 0x5F, 0x48, 0x61, 0x69, 0x72, 0x5F, 0x42, 0x75, 0x73, 0x69, 0x6E, 0x65, 0x73, 0x73, 0x4D, 0x61, 0x6E, 0x2E, 0x61, 0x64, 0x72, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x43, 0x6C, 0x6F, 0x6E, 0x65, 0x54, 0x61, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xD3, 0x5D, 0x44, 0x00, 0x00, 0x2D, 0x43, 0x98, 0x5E, 0xC1, 0x44, 0x00, 0x00, 0x80, 0x3F, 0xFA, 0x04, 0xB7, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x15, 0x6F, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x4C, 0x41, 0x53, 0x54, 0x45, 0x52, 0x08, 0x00, 0x00, 0x00, 0x4E, 0x49, 0x43, 0x45, 0x53, 0x48, 0x4F, 0x54, 0x00, 0x00, 0x00, 0x00, 0x78, 0x5D, 0x36, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xD9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x61, 0xCD, 0x00, 0x00, 0x15, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x3B, 0x25, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0xD1, 0x09, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let mut buffer = Vec::new();
    buffer.write_u32::<LittleEndian>(bytes.len() as u32)?;
    buffer.append(&mut bytes);
    make_tunneled_packet(0xc, &buffer)
}