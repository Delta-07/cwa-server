use std::io::{Error, Write};
use byteorder::{LittleEndian, WriteBytesExt};

pub fn make_tunneled_packet(op_code: u16, bytes: &[u8]) -> Result<Vec<u8>, Error> {
    let mut buffer = Vec::new();
    buffer.write_u16::<LittleEndian>(5)?;
    buffer.write_u8(true as u8)?;
    buffer.write_u32::<LittleEndian>(bytes.len() as u32 + 2)?;
    buffer.write_u16::<LittleEndian>(op_code)?;
    buffer.write_all(&bytes)?;
    Ok(buffer)
}

pub fn send_item_definitions() -> Result<Vec<u8>, Error> {
    let mut bytes: Vec<u8> = vec![];
    let mut buffer = Vec::new();
    buffer.write_u16::<LittleEndian>(0x25)?;
    buffer.write_i32::<LittleEndian>(bytes.len() as i32)?;
    buffer.append(&mut bytes);
    make_tunneled_packet(0x23, &buffer)
}

pub fn send_self_to_client() -> Result<Vec<u8>, Error> {
    let mut bytes: Vec<u8> = vec![
        0x2B, 0x44, 0xA8, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x3C, 0x72, 0x61, 0x63, 0x65, 0x3E, 0x5F, 0x3C, 0x67, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x3E, 0x5F, 0x68, 0x65, 0x61, 0x64, 0x5F, 0x63, 0x61, 0x75, 0x63, 0x61, 0x73, 0x69, 0x61, 0x6E, 0x2E, 0x61, 0x64, 0x72, 0x24, 0x00, 0x00, 0x00, 0x3C, 0x72, 0x61, 0x63, 0x65, 0x3E, 0x5F, 0x6D, 0x5F, 0x68, 0x61, 0x69, 0x72, 0x5F, 0x66, 0x6F, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5F, 0x3C, 0x68, 0x61, 0x69, 0x72, 0x74, 0x79, 0x70, 0x65, 0x3E, 0x2E, 0x61, 0x64, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x73, 0x6B, 0x69, 0x6E, 0x74, 0x6F, 0x6E, 0x65, 0x33, 0x04, 0x00, 0x00, 0x00, 0x6E, 0x6F, 0x6E, 0x65, 0x04, 0x00, 0x00, 0x00, 0x6E, 0x6F, 0x6E, 0x65, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0xD4, 0xB0, 0xC4, 0x1F, 0x14, 0xDD, 0xC1, 0x37, 0xC7, 0xAF, 0x43, 0x00, 0x00, 0x80, 0x3F, 0xFA, 0x04, 0xB7, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x15, 0x6F, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x4F, 0x70, 0x65, 0x6E, 0x20, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x0B, 0x00, 0x00, 0x00, 0x46, 0x72, 0x65, 0x65, 0x20, 0x52, 0x65, 0x61, 0x6C, 0x6D, 0x73, 0x00, 0x00, 0x00, 0x00, 0x78, 0x5D, 0x36, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xD9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x0B, 0x00, 0x00, 0x15, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x05, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x3B, 0x25, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0xD1, 0x09, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let mut buffer = Vec::new();
    buffer.write_u32::<LittleEndian>(bytes.len() as u32)?;
    buffer.append(&mut bytes);
    make_tunneled_packet(0xc, &buffer)
}